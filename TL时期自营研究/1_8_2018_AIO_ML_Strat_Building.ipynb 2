{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd, numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import & Process Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "location = \"C:/Users/workspace/brad_public_workspace_on_win/SH_tongliang/data/commodities_data/12_28_commodities_daily/\" \n",
    "j = \"j9000_d.csv\"\n",
    "jm = \"jm000_d.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "j_df = pd.read_csv(location+j, engine=\"python\", header=None)\n",
    "jm_df = pd.read_csv(location+jm, engine='python', header=None)\n",
    "j_df.columns = ['date', 'open', 'high', 'low', 'close', 'volume', 'holdings']\n",
    "jm_df.columns = ['date', 'open', 'high', 'low', 'close', 'volume', 'holdings']\n",
    "\n",
    "jm_df_cols = jm_df[['date', 'open', 'high', 'low', 'close', 'volume']]\n",
    "j_df_cols = j_df[['date', 'open', 'high', 'low', 'close', 'volume']]\n",
    "\n",
    "jm_df_cols['symbol'] = 'jm'\n",
    "j_df_cols['symbol'] = 'j'\n",
    "\n",
    "jm_df_cols['date'] = pd.to_datetime(jm_df_cols['date'])\n",
    "j_df_cols['date'] = pd.to_datetime(j_df_cols['date'])\n",
    "\n",
    "jm_df_cols = jm_df_cols.set_index(['date','symbol'])\n",
    "j_df_cols = j_df_cols.set_index(['date', 'symbol'])\n",
    "\n",
    "prices = pd.concat([jm_df_cols, j_df_cols]).sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[GaussianNB(priors=None),\n",
    "\n",
    " SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
    "   decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n",
    "   max_iter=-1, probability=False, random_state=5, shrinking=True,\n",
    "   tol=0.001, verbose=False),\n",
    "   \n",
    " RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
    "             max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
    "             min_impurity_split=1e-07, min_samples_leaf=1,\n",
    "             min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
    "             n_estimators=10, n_jobs=1, oob_score=False, random_state=5,\n",
    "             verbose=0, warm_start=False),\n",
    "             \n",
    " MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
    "        beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
    "        hidden_layer_sizes=(100,), learning_rate='constant',\n",
    "        learning_rate_init=0.001, max_iter=200, momentum=0.9,\n",
    "        nesterovs_momentum=True, power_t=0.5, random_state=5, shuffle=True,\n",
    "        solver='adam', tol=0.0001, validation_fraction=0.1, verbose=False,\n",
    "        warm_start=False)]"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  },
  "nav_menu": {},
  "toc": {
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 6,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
